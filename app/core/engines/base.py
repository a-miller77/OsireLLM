from abc import ABC, abstractmethod
from typing import Dict, Any, Optional
# Import necessary models
from ..models import JobStatus # Only JobStatus needed for instance management

# async def generate_job_script(self, request: CreateJobRequest, job_status: JobStatus) -> str:
#     """
# Generate the specific job submission script (e.g., Slurm sbatch script)
# required to launch this engine for the given request and status.

# Args:
#     request: The original job creation request details.
#     job_status: The current status object for the job, including allocated port.

# Returns:
#     The content of the job submission script as a string.
# """
# pass

# @abstractmethod
# async def launch(self, script_content: str) -> Tuple[Optional[str], Optional[str]]:
#     """
#     Launch the inference engine job using the provided script content.
#     Typically involves saving the script and running sbatch.

#     Args:
#         script_content: The job script content generated by generate_job_script.

#     Returns:
#         A tuple containing (job_id, error_message).
#         job_id is the Slurm job ID if submission is successful, None otherwise.
#         error_message contains details if submission fails, None otherwise.
#     """
#     pass

class InferenceEngine(ABC):
    """
    Abstract Base Class for managing existing inference engine jobs.
    Defines the common interface for checking status, terminating, etc.
    Launch operations are handled by static methods on concrete subclasses.
    """

    def __init__(self, job_status: JobStatus):
        """
        Initialize the engine instance with the status of the existing job.
        """
        self.job_status = job_status
        super().__init__()

    @abstractmethod
    async def get_status(self) -> JobStatus:
        """
        Get the current status details of the running engine job and update
        the internal job_status object accordingly.

        Returns:
            The updated JobStatus object reflecting the latest queried state.
        """
        pass

    @abstractmethod
    async def terminate(self) -> bool:
        """
        Terminate the running inference engine job.
        Typically involves running scancel.

        Returns:
            True if termination command was successful, False otherwise.
        """
        pass

    @abstractmethod
    async def get_schema_url(self) -> Optional[str]:
        """
        Get the URL for the OpenAPI schema provided by the running engine.
        Returns None if the engine doesn't provide a schema or if it's not running.

        Returns:
            The URL string for the schema, or None.
        """
        pass